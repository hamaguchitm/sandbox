※これは解答用テキストファイルです。

■解答を記入してください。未記入の場合は大幅な減点となります。
testdata.in.txt
を入力とした場合の、出力結果を記入してください（各ケースごとに改行してください）。

  254361
  81
  84765625
  79967232
  11298161
  1
  57768001
  3328
  32397824
  25452801


■使用言語・動作環境について
(1)言語の種類を記入してください。未記入の場合、減点となります。

  Python


(2)コンパイラ／インタプリタの名称・バージョン情報を記入してください。未記入の場合、減点となります。

  Python 2.7.5


■プログラムの特長・工夫した点等、アピールポイントについて。
あなたが書いたコードの内容や工夫した点をわかりやすく説明してください。
未記入の場合や「特になし」のような記述は、大幅な減点となります。

  累乗の計算を再帰関数で実現した。
  指数を1ずつ減らす再帰関数では指数が増えた時の効率が悪いため、
  指数を1/2に減らして得られた結果を2乗していく戦略を採用し高速な計算を実現した。

  ＜指数を1ずつ減らす再帰関数＞
    a^x = a * a^(x-1)

  ＜指数を1/2に減らす再帰関数＞
    a^x = a^(x/2) * a^(x/2) * a^(x%2)
 
  また、乗算の性質を利用し、
  最終的に必要な計算結果が下8桁のみであることから
  計算の過程で8桁目よりも上の数字を切り落とすことで計算効率を向上させた。

  ＜乗算の性質＞
    xを自然数とし、u(x)を8桁目よりも上の数値、l(x)を8桁以下の数値とする
    （例：  x: 1234567890 => u(x): 12, l(x): 34567890）
  
    x * y = (u(x)*100000000 + l(x)) * (u(y)*100000000 + l(y))
          = u(x) * u(y) * 100000000*100000000 ---- A
            + u(x) * l(y) * 100000000         ---- B
            + l(x) * u(y) * 100000000         ---- C
            + l(x) * l(y)                     ---- D

    上記でA,B,Cは8桁以下の数字は全て0となるため、
    x * yの下8桁は、l(x) * l(y)の下8桁と一致する


■もし企業からのスカウトメールがきたらどのくらい積極的にアクションすると思いますか？任意でお答えください。
「積極的に会ってみたいと思う」「社名や条件次第では会ってみたいと思う」「よほどのことがない限り返信しない」、他ありましたら記入してください。

  分からない

■あなたが書いたコードを貼り付けてください。未記入の場合は評価できません。
コードが完全な形（そのままコンパイル・実行）できるものでない場合は程度に応じて減点の対象となります。

  ＜実行方法（下記のコードをpow8.pyとして保存した場合）＞

    $ python pow8.py -f testdata.in.txt


#! /usr/bin/python
# -*- coding: utf-8 -*-

import sys
import traceback

def pow8_1(a, x, max):
  # 指数を1ずつ減らす再帰関数
  if x < 1:
    return 1
  else:
    if not a < max:
      a = a % max
    
    return (a * pow8_1(a, x - 1, max)) % max

def pow8(a, x, max):
  # 指数を1/2にする再帰関数
  if x < 1:
    return 1
  elif x == 1:
    return a % max
  else:
    if not a < max:
      a = a % max

    p1 = pow8(a, x / 2, max)
    p2 = pow8(a, x % 2, max)

    return p1 * p1 * p2 % max

if __name__ == "__main__":
  
  max = 100000000
  try:
    if len(sys.argv) == 4 and sys.argv[1] == "-i":
      # 確認用：a, x を引数に渡し、a^x を得る
      a = int(sys.argv[2])
      x = int(sys.argv[3])
      
      print sys.argv[2] + "^" + sys.argv[3] + " = " + str(pow8(a, x, max))

    elif len(sys.argv) == 3 and sys.argv[1] == "-f":
      # 回答用：ファイルを入力として受け取り、ファイル内の数字ペアを順に処理する
 
      f = open(sys.argv[2], "r")
      
      for line in f:
        nums = line.replace("\n", "").split(" ")
        a = int(nums[0])
        x = int(nums[1])
        if a == 0 and x == 0:
          continue
        else:
          print pow8(a, x, max)
    else:
      print "usage: " + sys.argv[0] + " -i <a> <x>"
      print "usage: " + sys.argv[0] + " -f <filename>"

  except:
    print traceback.format_exc(sys.exc_info()[2])
